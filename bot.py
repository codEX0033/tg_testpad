import telebot
from telebot import types
import sqlite3
import random
import time

bot = telebot.TeleBot('7806589236:AAGk_GMl6VtpF8v87ElqyXsEi-J_cvL_4a4')

def init_db():
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    c.execute('DROP TABLE IF EXISTS tests')
    c.execute('DROP TABLE IF EXISTS ad_links')
    c.execute('DROP TABLE IF EXISTS ad_stats')
    c.execute('DROP TABLE IF EXISTS users')
    c.execute('DROP TABLE IF EXISTS user_test_results')
    c.execute('DROP TABLE IF EXISTS ads')
    
    c.execute('''CREATE TABLE IF NOT EXISTS tests
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  creator_id INTEGER,
                  title TEXT,
                  description TEXT,
                  questions TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  is_active BOOLEAN DEFAULT 1,
                  total_attempts INTEGER DEFAULT 0,
                  avg_score REAL DEFAULT 0)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS ad_links
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  test_id INTEGER,
                  source TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS ad_stats
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  ad_link_id INTEGER,
                  user_id INTEGER,
                  clicked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY,
                  username TEXT,
                  first_name TEXT,
                  last_name TEXT,
                  joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS user_test_results
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  test_id INTEGER,
                  score INTEGER,
                  completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS ads
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  message_type TEXT,
                  content TEXT,
                  media_id TEXT,
                  caption TEXT,
                  frequency INTEGER,
                  is_active BOOLEAN DEFAULT 1,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    conn.commit()
    conn.close()

user_states = {}

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
ADMIN_IDS = []  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

class Test:
    def __init__(self):
        self.title = None
        self.questions = []
        self.current_question = {}

@bot.message_handler(commands=['start'])
def start(message):
    update_user_activity(message.from_user)
    
    if message.text.startswith('/start ad_'):
        parts = message.text.split('_')
        if len(parts) >= 3:
            ad_link_id = parts[1]
            test_id = parts[2]
            
            conn = sqlite3.connect('tests.db')
            c = conn.cursor()
            
            c.execute("INSERT INTO ad_stats (ad_link_id, user_id) VALUES (?, ?)",
                     (ad_link_id, message.from_user.id))
            conn.commit()
            
            c.execute("SELECT title FROM tests WHERE id = ?", (test_id,))
            result = c.fetchone()
            conn.close()
            
            if result:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                start_test = types.KeyboardButton('‚úçÔ∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç')
                markup.add(start_test)
                
                bot.reply_to(message, 
                            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Ç–µ—Å—Ç—É: {result[0]}\n"
                            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                            reply_markup=markup)
                return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    take_test = types.KeyboardButton('‚úçÔ∏è –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç')
    create_test = types.KeyboardButton('üéØ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç')
    help_btn = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    about_btn = types.KeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ')
    markup.add(take_test, create_test, help_btn, about_btn)
    
    if message.from_user.id in ADMIN_IDS:
        admin_btn = types.KeyboardButton('üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
        markup.add(admin_btn)
    
    bot.reply_to(message, 
                 "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                 reply_markup=markup)

def start_specific_test(message, test_id):
    user_id = message.from_user.id
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    c.execute("SELECT title, questions FROM tests WHERE id = ?", (test_id,))
    result = c.fetchone()
    conn.close()
    
    if not result:
        bot.reply_to(message, "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    title, questions = result
    questions = eval(questions)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    user_states[user_id] = {
        'test_id': test_id,
        'questions': questions,
        'total_questions': len(questions),
        'correct_answers': 0
    }
    
    bot.send_message(message.chat.id, f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç: {title}")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    show_question(message, user_id)

@bot.message_handler(func=lambda message: message.text == 'üéØ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç')
def create_test(message):
    user_id = message.from_user.id
    user_states[user_id] = Test()
    
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:")
    bot.register_next_step_handler(message, process_test_title)

def process_test_title(message):
    user_id = message.from_user.id
    user_states[user_id].title = message.text
    user_states[user_id].current_question = {'options': []}
    
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(message, process_question_text)

def process_question_text(message):
    user_id = message.from_user.id
    user_states[user_id].current_question['question'] = message.text
    
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
    bot.register_next_step_handler(message, process_correct_answer)

def process_correct_answer(message):
    user_id = message.from_user.id
    correct_answer = message.text
    user_states[user_id].current_question['correct_answer'] = correct_answer
    user_states[user_id].current_question['options'] = [correct_answer]
    
    bot.reply_to(message, f"–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ‚Ññ1:")
    bot.register_next_step_handler(message, process_wrong_answer, 1)

def process_wrong_answer(message, answer_num):
    user_id = message.from_user.id
    user_states[user_id].current_question['options'].append(message.text)
    
    if answer_num < 3:
        bot.reply_to(message, f"–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ‚Ññ{answer_num + 1}:")
        bot.register_next_step_handler(message, process_wrong_answer, answer_num + 1)
    else:
        question = user_states[user_id].current_question
        user_states[user_id].questions.append(question)
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        add_question = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å')
        finish_test = types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞')
        markup.add(add_question, finish_test)
        
        bot.reply_to(message, 
                    "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞?",
                    reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å')
def add_question(message):
    user_id = message.from_user.id
    user_states[user_id].current_question = {'options': []}
    
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(message, process_question_text)

@bot.message_handler(func=lambda message: message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞')
def finish_test(message):
    user_id = message.from_user.id
    test = user_states[user_id]
    
    if len(test.questions) == 0:
        bot.reply_to(message, "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.")
        return
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    try:
        c.execute("""
            INSERT INTO tests (
                creator_id, 
                title, 
                description,
                questions, 
                created_at,
                updated_at
            ) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        """, (
            user_id, 
            test.title,
            test.description if hasattr(test, 'description') else None,
            str(test.questions)
        ))
        
        test_id = c.lastrowid
        
        conn.commit()
        
        bot_username = bot.get_me().username
        test_link = f"https://t.me/{bot_username}?start=test_{test_id}"
        
        del user_states[user_id]
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        create_test_btn = types.KeyboardButton('üéØ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç')
        take_test_btn = types.KeyboardButton('‚úçÔ∏è –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç')
        markup.add(create_test_btn, take_test_btn)
        
        success_message = (
            f"‚úÖ *–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\!*\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: `{test.title}`\n"
            f"‚ùì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: `{len(test.questions)}`\n\n"
            f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —Ç–µ—Å—Ç:*\n`{test_link}`\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–æ–π—Ç–∏ –≤–∞—à —Ç–µ—Å—Ç\\."
        )
        
        bot.reply_to(
            message, 
            success_message,
            parse_mode='MarkdownV2',
            reply_markup=markup
        )
        
    except sqlite3.Error as e:
        bot.reply_to(
            message, 
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        print(f"Database error: {e}")
    
    finally:
        conn.close()

def update_test_statistics(test_id, score):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É
        c.execute("""
            UPDATE tests 
            SET 
                total_attempts = total_attempts + 1,
                avg_score = ((avg_score * total_attempts) + ?) / (total_attempts + 1),
                updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (score, test_id))
        
        conn.commit()
    except sqlite3.Error as e:
        print(f"Error updating test statistics: {e}")
    finally:
        conn.close()

@bot.message_handler(func=lambda message: message.text == '‚úçÔ∏è –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç')
def select_test(message):
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    c.execute("SELECT id, title FROM tests WHERE is_active = 1")
    tests = c.fetchall()
    conn.close()
    
    if not tests:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    for test_id, title in tests:
        markup.add(types.InlineKeyboardButton(
            text=title,
            callback_data=f"test_{test_id}"
        ))
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('test_'))
def start_test(call):
    test_id = call.data.split('_')[1]
    user_id = call.from_user.id
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    c.execute("SELECT questions FROM tests WHERE id = ?", (test_id,))
    result = c.fetchone()
    conn.close()
    
    if not result:
        bot.answer_callback_query(call.id, "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    questions = eval(result[0])
    user_states[user_id] = {
        'test_id': test_id,
        'questions': questions.copy(),
        'total_questions': len(questions),
        'correct_answers': 0
    }
    
    show_question(call.message, user_id)

def show_question(message, user_id):
    if random.random() < 0.2:
        show_random_ad(message)
    
    state = user_states[user_id]
    if not state['questions']:
        total_questions = state['total_questions']
        correct_answers = state['correct_answers']
        score = (correct_answers / total_questions) * 100
        
        update_test_statistics(state['test_id'], score)
        
        conn = sqlite3.connect('tests.db')
        c = conn.cursor()
        c.execute("""
            INSERT INTO user_test_results (user_id, test_id, score)
            VALUES (?, ?, ?)
        """, (user_id, state['test_id'], score))
        conn.commit()
        conn.close()
        
        result_text = (
            "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\\!*\n\n"
            f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {score:.1f}%\n\n"
        )
        
        if score == 100:
            result_text += "üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ\\! –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\\!"
        elif score >= 80:
            result_text += "üåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞\\! –ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ\\!"
        elif score >= 60:
            result_text += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\\! –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏\\!"
        elif score >= 40:
            result_text += "üí™ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\\!"
        else:
            result_text += "üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞\\!"
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        retry_btn = types.KeyboardButton('üîÑ –ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç')
        menu_btn = types.KeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(retry_btn, menu_btn)
        
        bot.send_message(
            message.chat.id,
            result_text,
            parse_mode='MarkdownV2',
            reply_markup=markup
        )
        del user_states[user_id]
        return
    
    question = state['questions'][0]
    options = question['options']
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    random.shuffle(options)
    for i, option in enumerate(options):
        button_text = f"{'ABCD'[i]}. {option}"
        markup.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"answer_{i}"
        ))
    
    question_text = (
        f"‚ùì *–í–æ–ø—Ä–æ—Å {state['total_questions'] - len(state['questions']) + 1} "
        f"–∏–∑ {state['total_questions']}*\n\n"
        f"{question['question']}"
    )
    
    question_text = question_text.replace('.', '\\.').replace('-', '\\-').replace('!', '\\!')
    
    bot.send_message(
        message.chat.id,
        question_text,
        parse_mode='MarkdownV2',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def process_answer(call):
    user_id = call.from_user.id
    if user_id not in user_states:
        bot.answer_callback_query(call.id, "‚ùå –¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—á–∞—Ç!")
        return
    
    state = user_states[user_id]
    
    if not state['questions']:
        bot.answer_callback_query(call.id, "‚ùå –¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return
        
    current_question = state['questions'][0]
    selected_option = int(call.data.split('_')[1])
    selected_answer = current_question['options'][selected_option]
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    
    if selected_answer == current_question['correct_answer']:
        state['correct_answers'] += 1
        bot.send_message(
            call.message.chat.id,
            "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ\\!*",
            parse_mode='MarkdownV2'
        )
    else:
        bot.send_message(
            call.message.chat.id,
            f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\\!*\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{current_question['correct_answer']}*",
            parse_mode='MarkdownV2'
        )
    
    state['questions'].pop(0)
    
    time.sleep(1)
    
    if not state['questions']:
        total_questions = state['total_questions']
        correct_answers = state['correct_answers']
        score = (correct_answers / total_questions) * 100
        
        update_test_statistics(state['test_id'], score)
        
        conn = sqlite3.connect('tests.db')
        c = conn.cursor()
        try:
            c.execute("""
                INSERT INTO user_test_results (user_id, test_id, score)
                VALUES (?, ?, ?)
            """, (user_id, state['test_id'], score))
            conn.commit()
        except sqlite3.Error as e:
            print(f"Database error: {e}")
        finally:
            conn.close()
        
        result_text = (
            "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\\!*\n\n"
            f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: `{correct_answers}` –∏–∑ `{total_questions}`\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: `{score:.1f}%`\n\n"
        )
        
        if score == 100:
            result_text += "üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ\\! –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\\!"
        elif score >= 80:
            result_text += "üåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞\\! –ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ\\!"
        elif score >= 60:
            result_text += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\\! –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏\\!"
        elif score >= 40:
            result_text += "üí™ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\\!"
        else:
            result_text += "üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞\\!"
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        retry_btn = types.KeyboardButton('üîÑ –ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç')
        menu_btn = types.KeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(retry_btn, menu_btn)
        
        bot.send_message(
            call.message.chat.id,
            result_text,
            parse_mode='MarkdownV2',
            reply_markup=markup
        )
        
        del user_states[user_id]
    else:
        show_question(call.message, user_id)

@bot.message_handler(func=lambda message: message.text == 'üîÑ –ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç')
def restart_test_selection(message):
    select_test(message)

@bot.message_handler(func=lambda message: message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def return_to_menu(message):
    start(message)

@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
def help_command(message):
    help_text = (
        "üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*\n\n"
        "*üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:*\n"
        "1\\. –ù–∞–∂–º–∏—Ç–µ 'üéØ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç'\n"
        "2\\. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n"
        "3\\. –î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤\n"
        "4\\. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ—Ç–æ–≤—ã–π —Ç–µ—Å—Ç\n\n"
        "*‚úçÔ∏è –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞:*\n"
        "1\\. –ù–∞–∂–º–∏—Ç–µ '‚úçÔ∏è –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç'\n"
        "2\\. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "3\\. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        "4\\. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
        "‚ùóÔ∏è –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    
    bot.reply_to(message, help_text, parse_mode='MarkdownV2')

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –û –±–æ—Ç–µ')
def about_command(message):
    about_text = (
        "ü§ñ *Test Creator Bot*\n\n"
        "–í–µ—Ä—Å–∏—è: 1\\.0\n"
        "–°–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –∏ –æ–ø—Ä–æ—Å–æ–≤\n\n"
        "*üåü –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤\n"
        "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
        "*üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:*\n"
        "Telegram: "
    )
    
    bot.reply_to(message, about_text, parse_mode='MarkdownV2')

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    stats_btn = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    ads_btn = types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π')
    back_btn = types.KeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(stats_btn, ads_btn, back_btn)
    
    bot.reply_to(message, 
                 "*üëë –ê–¥–º–∏–Ω\\-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                 parse_mode='MarkdownV2',
                 reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
def show_statistics(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM user_test_results")
    total_tests_taken = c.fetchone()[0]
    
    c.execute("""
        SELECT COUNT(DISTINCT id) 
        FROM users 
        WHERE last_activity >= datetime('now', '-1 day')
    """)
    active_users_24h = c.fetchone()[0]
    
    c.execute("""
        SELECT 
            users.first_name,
            users.username,
            COUNT(user_test_results.id) as tests_completed,
            ROUND(AVG(user_test_results.score), 1) as avg_score
        FROM users
        LEFT JOIN user_test_results ON users.id = user_test_results.user_id
        GROUP BY users.id
        HAVING tests_completed > 0
        ORDER BY tests_completed DESC
        LIMIT 5
    """)
    top_users = c.fetchall()
    
    c.execute("""
        SELECT 
            tests.title,
            COUNT(user_test_results.id) as times_completed,
            ROUND(AVG(user_test_results.score), 1) as avg_score
        FROM tests
        LEFT JOIN user_test_results ON tests.id = user_test_results.test_id
        GROUP BY tests.id
        HAVING times_completed > 0
        ORDER BY times_completed DESC
        LIMIT 5
    """)
    top_tests = c.fetchall()
    
    conn.close()
    
    response = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
    response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
    response += f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: `{total_tests_taken}`\n"
    response += f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: `{active_users_24h}`\n\n"
    
    response += "*üèÜ –¢–æ–ø\\-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
    for user in top_users:
        name = user[0] or user[1] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        name = name.replace(".", "\\.").replace("-", "\\-").replace("!", "\\!")
        avg_score = user[3] if user[3] is not None else 0
        response += f"‚Ä¢ {name}: `{user[2]}` —Ç–µ—Å—Ç–æ–≤ \\(—Å—Ä\\. –±–∞–ª–ª: `{avg_score}%`\\)\n"
    
    response += "\n*üìà –¢–æ–ø\\-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:*\n"
    for test in top_tests:
        title = test[0].replace(".", "\\.").replace("-", "\\-").replace("!", "\\!")
        avg_score = test[2] if test[2] is not None else 0
        response += f"‚Ä¢ {title}: `{test[1]}` —Ä–∞–∑ \\(—Å—Ä\\. –±–∞–ª–ª: `{avg_score}%`\\)\n"
    
    bot.reply_to(message, response, parse_mode='MarkdownV2')

@bot.message_handler(func=lambda message: message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def return_to_main_menu(message):
    start(message)

@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤')
def show_test_statistics(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    try:
        c.execute("""
            SELECT 
                title,
                total_attempts,
                avg_score,
                created_at,
                updated_at
            FROM tests
            WHERE is_active = 1
            ORDER BY total_attempts DESC
        """)
        
        tests = c.fetchall()
        
        if not tests:
            bot.reply_to(message, "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ—Å—Ç–∞–º.")
            return
        
        response = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:*\n\n"
        
        for test in tests:
            title, attempts, avg_score, created, updated = test
            response += (
                f"*{title}*\n"
                f"üìù –ü–æ–ø—ã—Ç–æ–∫: `{attempts}`\n"
                f"üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: `{avg_score:.1f}%`\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: `{created}`\n"
                f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: `{updated}`\n"
                f"\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\n"
            )
        
        bot.reply_to(message, response, parse_mode='MarkdownV2')
        
    except sqlite3.Error as e:
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        print(f"Database error: {e}")
    
    finally:
        conn.close()

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π')
def manage_ads(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    add_ad = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É')
    view_ads = types.KeyboardButton('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã')
    delete_ad = types.KeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É')
    back = types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
    markup.add(add_ad, view_ads, delete_ad, back)
    
    bot.reply_to(message, 
                 "*üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                 parse_mode='MarkdownV2',
                 reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É')
def add_ad(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    text_ad = types.KeyboardButton('üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞')
    photo_ad = types.KeyboardButton('üñº –†–µ–∫–ª–∞–º–∞ —Å —Ñ–æ—Ç–æ')
    video_ad = types.KeyboardButton('üé• –†–µ–∫–ª–∞–º–∞ —Å –≤–∏–¥–µ–æ')
    back = types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
    markup.add(text_ad, photo_ad, video_ad, back)
    
    user_states[message.from_user.id] = {'state': 'adding_ad'}
    
    bot.reply_to(message, 
                 "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–ª–∞–º—ã:",
                 reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞')
def add_text_ad(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_states[message.from_user.id] = {'state': 'waiting_ad_text'}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel = types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞')
    markup.add(cancel)
    
    bot.reply_to(message, 
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
                 reply_markup=markup)

@bot.message_handler(func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get('state') == 'waiting_ad_text')
def process_ad_text(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        del user_states[message.from_user.id]
        manage_ads(message)
        return
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    try:
        c.execute("""
            INSERT INTO ads (message_type, content)
            VALUES (?, ?)
        """, ('text', message.text))
        conn.commit()
        
        bot.reply_to(message, "‚úÖ –†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    except sqlite3.Error as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.")
        print(f"Database error: {e}")
    finally:
        conn.close()
        del user_states[message.from_user.id]
        manage_ads(message)

@bot.message_handler(func=lambda message: message.text == 'üñº –†–µ–∫–ª–∞–º–∞ —Å —Ñ–æ—Ç–æ')
def add_photo_ad(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_states[message.from_user.id] = {'state': 'waiting_ad_photo'}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel = types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞')
    markup.add(cancel)
    
    bot.reply_to(message, 
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é):",
                 reply_markup=markup)

@bot.message_handler(content_types=['photo'], func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get('state') == 'waiting_ad_photo')
def process_ad_photo(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    photo = message.photo[-1]
    caption = message.caption or ''
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    try:
        c.execute("""
            INSERT INTO ads (message_type, media_id, caption)
            VALUES (?, ?, ?)
        """, ('photo', photo.file_id, caption))
        conn.commit()
        
        bot.reply_to(message, "‚úÖ –†–µ–∫–ª–∞–º–Ω–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    except sqlite3.Error as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.")
        print(f"Database error: {e}")
    finally:
        conn.close()
        del user_states[message.from_user.id]
        manage_ads(message)

@bot.message_handler(func=lambda message: message.text == 'üé• –†–µ–∫–ª–∞–º–∞ —Å –≤–∏–¥–µ–æ')
def add_video_ad(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    user_states[message.from_user.id] = {'state': 'waiting_ad_video'}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel = types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞')
    markup.add(cancel)
    
    bot.reply_to(message, 
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é):",
                 reply_markup=markup)

@bot.message_handler(content_types=['video'], func=lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get('state') == 'waiting_ad_video')
def process_ad_video(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    video = message.video
    caption = message.caption or ''
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    try:
        c.execute("""
            INSERT INTO ads (message_type, media_id, caption)
            VALUES (?, ?, ?)
        """, ('video', video.file_id, caption))
        conn.commit()
        
        bot.reply_to(message, "‚úÖ –†–µ–∫–ª–∞–º–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    except sqlite3.Error as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.")
        print(f"Database error: {e}")
    finally:
        conn.close()
        del user_states[message.from_user.id]
        manage_ads(message)

@bot.message_handler(func=lambda message: message.text == 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã')
def view_ads(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    c.execute("""
        SELECT id, message_type, content, media_id, caption, is_active 
        FROM ads 
        ORDER BY created_at DESC
    """)
    
    ads = c.fetchall()
    conn.close()
    
    if not ads:
        bot.reply_to(message, "–†–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    for ad in ads:
        ad_id, msg_type, content, media_id, caption, is_active = ad
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
        
        if msg_type == 'text':
            bot.send_message(message.chat.id, 
                           f"–†–µ–∫–ª–∞–º–∞ #{ad_id}\n–°—Ç–∞—Ç—É—Å: {status}\n\n{content}")
        elif msg_type == 'photo':
            bot.send_photo(message.chat.id, media_id,
                         caption=f"–†–µ–∫–ª–∞–º–∞ #{ad_id}\n–°—Ç–∞—Ç—É—Å: {status}\n\n{caption}")
        elif msg_type == 'video':
            bot.send_video(message.chat.id, media_id,
                         caption=f"–†–µ–∫–ª–∞–º–∞ #{ad_id}\n–°—Ç–∞—Ç—É—Å: {status}\n\n{caption}")

@bot.message_handler(func=lambda message: message.text == 'üóë –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É')
def delete_ad_start(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    c.execute("SELECT id, message_type, content, caption FROM ads WHERE is_active = 1")
    ads = c.fetchall()
    conn.close()
    
    if not ads:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    for ad in ads:
        ad_id, msg_type, content, caption = ad
        button_text = f"#{ad_id} - {content[:30] if msg_type == 'text' else caption[:30] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}..."
        markup.add(types.InlineKeyboardButton(text=button_text, callback_data=f"del_ad_{ad_id}"))
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('del_ad_'))
def delete_ad(call):
    if call.from_user.id not in ADMIN_IDS:
        return
    
    ad_id = call.data.split('_')[2]
    
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    try:
        c.execute("UPDATE ads SET is_active = 0 WHERE id = ?", (ad_id,))
        conn.commit()
        bot.answer_callback_query(call.id, "‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        bot.edit_message_text("‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", 
                            call.message.chat.id, 
                            call.message.message_id)
    except sqlite3.Error as e:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.")
        print(f"Database error: {e}")
    finally:
        conn.close()

@bot.message_handler(func=lambda message: message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥')
def return_to_admin(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∞')
def cancel_operation(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    if message.from_user.id in user_states:
        del user_states[message.from_user.id]
    
    manage_ads(message)

def update_user_activity(user):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    conn = sqlite3.connect('tests.db')
    c = conn.cursor()
    
    try:
        c.execute("""
            INSERT INTO users (id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET
                username = excluded.username,
                first_name = excluded.first_name,
                last_name = excluded.last_name,
                last_activity = CURRENT_TIMESTAMP
        """, (user.id, user.username, user.first_name, user.last_name))
        
        conn.commit()
    except sqlite3.Error as e:
        print(f"Error updating user activity: {e}")
    finally:
        conn.close()

init_db()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
